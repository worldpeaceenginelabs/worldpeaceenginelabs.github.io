'use strict';window.tsfAys=function(){const l10n='undefined'!==typeof tsfAysL10n&&tsfAysL10n;let _settingsChanged=false;let _loadedListeners=false;let _registeredChangeListeners=new Map();const getChangedState=()=>areSettingsChanged();const areSettingsChanged=()=>_settingsChanged;const _getNodeArray=elements=>(elements instanceof Element||elements instanceof Document)?[elements]:[...document.querySelectorAll(Array.isArray(elements)?elements.join(', '):elements)];const registerChange=()=>{_settingsChanged=true;}
const deregisterChange=()=>{_settingsChanged=false;}
let _debounceReset=void 0;const reset=()=>{deregisterChange();if(_loadedListeners){clearTimeout(_debounceReset);_debounceReset=setTimeout(reloadDefaultListeners,1e3);}}
const _triggerUnload=()=>{let wereSettingsChanged=areSettingsChanged();deregisterChange();setTimeout(()=>{reset();wereSettingsChanged&&registerChange();},1000);}
const _triggerChange=event=>{if(!event.isTrusted)return;registerChange();_exemptFutureChanges();}
const _exemptFutureChanges=()=>{_registeredChangeListeners.forEach((eventType,element)=>{element.removeEventListener(eventType,_triggerChange);});_registeredChangeListeners.clear();}
const registerChangeListener=(elements,eventType)=>{_getNodeArray(elements).filter(el=>!el.classList.contains('tsf-input-not-saved')&&'hidden'!==el.type).forEach(el=>{_registeredChangeListeners.set(el,eventType);el.addEventListener(eventType,_triggerChange)});}
const registerResetListener=(elements,eventType)=>{_getNodeArray(elements).forEach(el=>{el.addEventListener(eventType,reset);});}
const registerUnloadListener=(elements,eventType)=>{_getNodeArray(elements).forEach(el=>{el.addEventListener(eventType,_triggerUnload)});}
const reloadDefaultListeners=()=>{_loadedListeners=false;registerChangeListener(['.tsf-metaboxes input[type=radio][name]','.tsf-metaboxes input[type=checkbox][name]','.tsf-metaboxes select[name]','#tsf-inpost-box .inside input[type=radio][name]','#tsf-inpost-box .inside input[type=checkbox][name]','#tsf-inpost-box .inside select[name]','.tsf-term-meta input[type=radio][name]','.tsf-term-meta input[type=checkbox][name]','.tsf-term-meta select[name]',],'change');registerChangeListener(['.tsf-metaboxes input:not([type=radio]):not([type=checkbox])[name]','.tsf-metaboxes textarea[name]','#tsf-inpost-box .inside input:not([type=radio]):not([type=checkbox])[name]','#tsf-inpost-box .inside textarea[name]','.tsf-term-meta input:not([type=radio]):not([type=checkbox])[name]','.tsf-term-meta textarea[name]',],'input');registerResetListener(document,'tsf-gutenberg-onsave-completed');registerUnloadListener(['.tsf-metaboxes input[type="submit"]','#publishing-action input[type="submit"]','#save-action input[type="submit"]','a.submitdelete','.edit-tag-actions input[type="submit"]','.edit-tag-actions .delete',],'click');document.dispatchEvent(new CustomEvent('tsf-registered-ays-listeners'));_loadedListeners=true;}
const _alertUserBeforeunload=event=>{if(areSettingsChanged()){event.preventDefault();event.returnValue=l10n.i18n['saveAlert'];}}
const _readyAys=()=>{reloadDefaultListeners();areSettingsChanged()&&console.warn('tsfAys: Doing it wrong! Settings were changed prior ready-state. Debug me.');deregisterChange();window.addEventListener('beforeunload',_alertUserBeforeunload);}
return Object.assign({load:()=>{document.body.addEventListener('tsf-interactive',_readyAys);}},{reset,getChangedState,areSettingsChanged,registerChange,deregisterChange,registerChangeListener,registerResetListener,registerUnloadListener,reloadDefaultListeners},{l10n});}();window.tsfAys.load();
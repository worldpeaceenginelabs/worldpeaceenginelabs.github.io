/*!elementor - v0.7.1 - 18-08-2016*/(function(global,factory){typeof exports==='object'&&typeof module!=='undefined'?module.exports=factory(require('underscore'),require('backbone')):typeof define==='function'&&define.amd?define(['underscore','backbone'],factory):(global.Backbone=global.Backbone||{},global.Backbone.Radio=factory(global._,global.Backbone));}(this,function(_,Backbone){'use strict';_='default'in _?_['default']:_;Backbone='default'in Backbone?Backbone['default']:Backbone;var babelHelpers={};babelHelpers.typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};babelHelpers;var previousRadio=Backbone.Radio;var Radio=Backbone.Radio={};Radio.VERSION='1.0.4';Radio.noConflict=function(){Backbone.Radio=previousRadio;return this;};Radio.DEBUG=false;Radio._debugText=function(warning,eventName,channelName){return warning+(channelName?' on the '+channelName+' channel':'')+': "'+eventName+'"';};Radio.debugLog=function(warning,eventName,channelName){if(Radio.DEBUG&&console&&console.warn){console.warn(Radio._debugText(warning,eventName,channelName));}};var eventSplitter=/\s+/;Radio._eventsApi=function(obj,action,name,rest){if(!name){return false;}
var results={};if((typeof name==='undefined'?'undefined':babelHelpers.typeof(name))==='object'){for(var key in name){var result=obj[action].apply(obj,[key,name[key]].concat(rest));eventSplitter.test(key)?_.extend(results,result):results[key]=result;}
return results;}
if(eventSplitter.test(name)){var names=name.split(eventSplitter);for(var i=0,l=names.length;i<l;i++){results[names[i]]=obj[action].apply(obj,[names[i]].concat(rest));}
return results;}
return false;};Radio._callHandler=function(callback,context,args){var a1=args[0],a2=args[1],a3=args[2];switch(args.length){case 0:return callback.call(context);case 1:return callback.call(context,a1);case 2:return callback.call(context,a1,a2);case 3:return callback.call(context,a1,a2,a3);default:return callback.apply(context,args);}};function removeHandler(store,name,callback,context){var event=store[name];if((!callback||callback===event.callback||callback===event.callback._callback)&&(!context||context===event.context)){delete store[name];return true;}}
function removeHandlers(store,name,callback,context){store||(store={});var names=name?[name]:_.keys(store);var matched=false;for(var i=0,length=names.length;i<length;i++){name=names[i];if(!store[name]){continue;}
if(removeHandler(store,name,callback,context)){matched=true;}}
return matched;}
var _logs={};function _partial(channelName){return _logs[channelName]||(_logs[channelName]=_.partial(Radio.log,channelName));}
_.extend(Radio,{log:function log(channelName,eventName){if(typeof console==='undefined'){return;}
var args=_.drop(arguments,2);console.log('['+channelName+'] "'+eventName+'"',args);},tuneIn:function tuneIn(channelName){var channel=Radio.channel(channelName);channel._tunedIn=true;channel.on('all',_partial(channelName));return this;},tuneOut:function tuneOut(channelName){var channel=Radio.channel(channelName);channel._tunedIn=false;channel.off('all',_partial(channelName));delete _logs[channelName];return this;}});function makeCallback(callback){return _.isFunction(callback)?callback:function(){return callback;};}
Radio.Requests={request:function request(name){var args=_.rest(arguments);var results=Radio._eventsApi(this,'request',name,args);if(results){return results;}
var channelName=this.channelName;var requests=this._requests;if(channelName&&this._tunedIn){Radio.log.apply(this,[channelName,name].concat(args));}
if(requests&&(requests[name]||requests['default'])){var handler=requests[name]||requests['default'];args=requests[name]?args:arguments;return Radio._callHandler(handler.callback,handler.context,args);}else{Radio.debugLog('An unhandled request was fired',name,channelName);}},reply:function reply(name,callback,context){if(Radio._eventsApi(this,'reply',name,[callback,context])){return this;}
this._requests||(this._requests={});if(this._requests[name]){Radio.debugLog('A request was overwritten',name,this.channelName);}
this._requests[name]={callback:makeCallback(callback),context:context||this};return this;},replyOnce:function replyOnce(name,callback,context){if(Radio._eventsApi(this,'replyOnce',name,[callback,context])){return this;}
var self=this;var once=_.once(function(){self.stopReplying(name);return makeCallback(callback).apply(this,arguments);});return this.reply(name,once,context);},stopReplying:function stopReplying(name,callback,context){if(Radio._eventsApi(this,'stopReplying',name)){return this;}
if(!name&&!callback&&!context){delete this._requests;}else if(!removeHandlers(this._requests,name,callback,context)){Radio.debugLog('Attempted to remove the unregistered request',name,this.channelName);}
return this;}};Radio._channels={};Radio.channel=function(channelName){if(!channelName){throw new Error('You must provide a name for the channel.');}
if(Radio._channels[channelName]){return Radio._channels[channelName];}else{return Radio._channels[channelName]=new Radio.Channel(channelName);}};Radio.Channel=function(channelName){this.channelName=channelName;};_.extend(Radio.Channel.prototype,Backbone.Events,Radio.Requests,{reset:function reset(){this.off();this.stopListening();this.stopReplying();return this;}});var channel;var args;var systems=[Backbone.Events,Radio.Requests];_.each(systems,function(system){_.each(system,function(method,methodName){Radio[methodName]=function(channelName){args=_.rest(arguments);channel=this.channel(channelName);return channel[methodName].apply(channel,args);};});});Radio.reset=function(channelName){var channels=!channelName?this._channels:[this._channels[channelName]];_.invoke(channels,'reset');};return Radio;}));